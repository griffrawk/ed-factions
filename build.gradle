group 'fish.net'
version '1.0.0'

apply plugin: 'groovy'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.4.6'
    compile 'org.apache.httpcomponents:httpclient:4.5.3'
    compile 'commons-cli:commons-cli:1.2'
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'org.slf4j:slf4j-simple:1.7.25'
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.2.1'
    jarFile = "${rootDir}/wrapper/wrapper.jar"
}

task stats(type: JavaExec, dependsOn: classes) {
    description = "Gets stats for chosen faction"

    if (project.hasProperty('args')) {
        // this is just a fancy regex to get all the args from '-Pargs="-a -b -c"' and passing them to the main class
        def myArgs = (project.args =~ /([^\s"']+)|["']([^'"]*)["']/).collect{it[1] ?: it[2]}
        args myArgs
    }

    main = 'fish.ed.FactionStatsOutput'
    classpath configurations.compile, configurations.runtime, sourceSets.main.output
}

task within(type: JavaExec, dependsOn: classes) {
    description = "Displays systems within given range of given system"

    if (project.hasProperty('args')) {
        // this is just a fancy regex to get all the args from '-Pargs="-a -b -c"' and passing them to the main class
        def myArgs = (project.args =~ /([^\s"']+)|["']([^'"]*)["']/).collect{it[1] ?: it[2]}
        args myArgs
    }

    main = 'fish.ed.Within'
    classpath configurations.compile, configurations.runtime, sourceSets.main.output
}
